pwd
q()
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
library(ggplot)
library(ggplot)
library(ggplot2)
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
library(ggplot2)
ggplot2(data = ChickWeight, aes(x = Diet, y = weight))
library(ggplot2)
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
library(ggplot2)
ggplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_boxplot()
library(ggplot2)
ggplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_boxplot()+geom_jitter()
ggplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_boxplot()+geom_jitter()+geom_freqpoly()
ggplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_boxplot()+geom_jitter()+geom_freqpoly()
ggplot()+geom_boxplot(data = ChickWeight, aes(x = Diet, y = weight), fill="pink")
ggplot()+geom_boxplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_jitter(data = ChickWeight, aes(x = Diet, y = weight, color = chick))
ggplot()+geom_boxplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_jitter(data = ChickWeight, aes(x = Diet, y = weight, color = Diet)))
ggplot()+geom_boxplot(data = ChickWeight, aes(x = Diet, y = weight))
ggplot()+geom_boxplot(data = ChickWeight, aes(x = Diet, y = weight colour = "orange"))
```ggplot()+geom_boxplot(data = ch)
```ggplot()+geom_boxplot(data = ch)
```ggplot()+geom_boxplot(data = ch)
(data = ChickWeight, aes(x = Diet, y = weight))
(data = ChickWeight, aes(x = Diet, y = weight))
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight))+geom_boxplot()+geom_jitter()+geom_freqpoly()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight))
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight)) +
geom_boxplot()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight)) +
geom_boxplot() +
geom_jitter()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight, color = Diet)) +
geom_boxplot() +
geom_jitter()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight, color = Diet)) +
geom_boxplot()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight, color = Diet, fill = "red")) +
geom_boxplot()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight, fill = Diet)) +
geom_boxplot()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight, fill = Diet)) +geom_bar(stat="identity")
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")+labs(title = "this is a barchart")
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")+labs(title = "this is a barchart", y = 'weight factor', x = 'Diet fed')
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'weight factor', x = 'Diet fed')
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'weight factor', x = 'Diet fed')
plot1 + scale_x_discrete(name = "Diet fed to kids")
```
```{r}
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'weight factor', x = 'Diet fed')
plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")
```
```{r}
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')
plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")
```
```{r}
plot2+theme_bow()
()
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')
plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")+plot2+theme_classic()
```
```{r}
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')
plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")+plot2+theme_classic()
```
```{r}
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")
plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')
plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")+plot2+theme_classic()
```
```{r}
plot2+theme_classic()
```
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")+plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')+plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")+plot2+theme_classic()
```
```{r}
plot2+theme_classic()
```
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")+plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')+plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")+plot2+theme_classic()
plot2+theme_classic()
plot2+theme(pane1.background = element_blank()
```
```{r}
ggplot(data = ChickWeight, plot2+theme(pane1.background = element_blank()
```
```{r}
```{r}
ggplot(data = ChickWeight, aes(x = Diet, y = weight*2, fill = Diet)) +geom_bar(stat="identity")+plot+labs(title = "this is a barchart", y = 'kilifi fellows', x = 'Diet fed')+plot1 + scale_x_discrete(name = "Diet fed to kids")+ scale_y_continous(name = "kilifi fellows")+plot2+theme_classic()
plot2+theme_classic()
plot2+theme(pane1.background = element_blank()
plot2+theme(pane1.background = element_text(size20, colour = "blue"))
plot2+theme(pane1.background = element_text(size20, colour = "blue", face = 'italics'))
plot2+theme(pane1.background = element_text(size20, colour = "blue", face = 'italics', title = element_text(size = 40))
```{r}
library(shiny)
savehistory("~/shiny tutorials/teddy/trial1.R")
install.packages("phyloseq")
install.packages("tidyverse")
install.packages("rvest")
install.packages("xml2")
install.packages("httr")
install.packages("rvest")
install.packages("tidyverse")
install.packages("tidyverse")
library(plyr)
library(reshape2)
library(grid)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(ape)
library(scales)
biomfile <- "/home/babydoll/Downloads/EANBIT_mangrove/data/feature-table.biom"
food1 <-import_biom(biomfile)
## create a variable that contain the table  with the data
mangrove1 <-import_biom(biomfile)
library(phyloseq)
## create a variable that contain the table  with the data
mangrove1 <-import_biom(biomfile)
library(phyloseq)
## create a variable that contain the table  with the data
mangrove1 <-import_biom(biomfile)
library(qiime2)
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("dplyr")
library(tidyverse)
metadata<-read_tsv("sample-metadata.tsv")
###### merge files
library(here)
install.packages("here")
###### merge file
library(here)
# Read in OTU table
in_path <- here("phyloseq", "otu_table.txt")
otu <- read.table(file = in_path, header = TRUE)
# Read in OTU table
in_path <- here("Downloads/EANBIT_mangrove/data/", "otu_table.txt")
otu <- read.table(file = in_path, header = TRUE)
head(otu)
# Read in OTU table
in_path <- here("Downloads/EANBIT_mangrove/data/otu_table.txt", "otu_table.txt")
otu <- read.table(file = in_path, header = TRUE)
# Read in OTU table
in_path <- here("Downloads/EANBIT_mangrove/data", "otu_table.txt")
otu <- read.table(file = in_path, header = TRUE)
# Read in OTU table
in_path <- here("Downloads/EANBIT_mangrove/data", "otu_table.tsv")
otu <- read.table(file = in_path, header = TRUE)
otu <- read.table(file = "in_path", header = TRUE)
otu <- read.table(file = input-path, header = TRUE)
# Read in OTU table
inputpath <- here("Downloads/EANBIT_mangrove/data", "otu_table.txt")
otu <- read.table(file = inputpath, header = TRUE) head(otu)
otu <- read.table(file = "inputpath", header = TRUE) head(otu)
otu <- read.table(file = "inputpath", header = TRUE)
otu <- read.table(file = "data", header = TRUE)
# Read in OTU table
in_path <- here("Downloads/EANBIT_mangrove/data", "otu_table.txt")
otu <- read.csv(file = "data", header = TRUE)
otu <- read.table(file = "data", header = TRUE)
otu <- read.table(file = "in_path", header = TRUE)
otu <- read.table(file = "otu_table.tsv", header = TRUE)
otu <- read.table(file = "otu_table.txt", header = TRUE)
in_path <- here("phyloseq", "otu_table.txt")
otu <- read.table(file = in_path, header = TRUE)
in_path <- here("/home/babydoll/Downloads/EANBIT_mangrove/data", "otu_table.txt")
otu <- read.table(file = in_path, header = TRUE)
head(otu)
### merge the files
library(here)
setwd("/home/babydoll/Downloads/EANBIT_mangrove/data/phyloseq")
### merge the files
library(here)
### read in otu table
in_path <- here("phyloseq", "otu_table.txt")
otu <- read.table(file = "otu_table.txt", header = TRUE)
head(otu)
##### read taxonomy table
tax	<- read.table(file = "taxonomy.tsv", sep = '\t', header = TRUE)
head(tax)
#### merge the files
merged_file <- merge(otu, tax, by.x = c("OTUID"), by.y = c("OTUID"))
head(merged_file)
# Note: the number of rows should equal your shortest file length, drops taxonomy
# for OTUs that don't exist in your OTU table
################# now import into R
### Output merged.txt file
library(here)
write.table(merged_file, file = out_path, sep = "\t", col.names = TRUE, row.names = FALSE)
write.table(merged_file, file = out_path, sep = ",", col.names = TRUE, row.names = FALSE)
biomfile <- "/home/babydoll/Downloads/EANBIT_mangrove/data/phyloseq/feature-table.biom"
library(phyloseq)
file1 <- read_biom(biomfile)
file1 <- import_biom(biomfile)
write.table(merged_file, file = out_path, sep = ",", col.names = TRUE, row.names = FALSE)
out_path <- here("merged_file")
write.table(merged_file, file = out_path, sep = ",", col.names = TRUE, row.names = FALSE)
######  set environment
library(phyloseq)
library(ggplot2)
library(ape)
library(ggplot2)
library(ape)
############# now we import into phyloseq
### Read in OTU table
otu_table_in <- read.delim("merged_file")
otu_table_in <- as.matrix(otu_table_in)
# Read in taxonomy
# Separated by kingdom, phylum, class, order, family, genus, species
library(here)
setwd("/home/babydoll/Downloads/EANBIT_mangrove/data/phyloseq")
taxonomy <- read.table("taxonomy.tsv", sep = '\t',  header = TRUE)
taxonomy <- as.matrix(taxonomy)
### Read in metadata
metadata <- read.table("sample-metadata.txt", header = TRUE)
#### Read in tree
phy_tree <- read_tree("tree.nwk")
# Import all as phyloseq objects
OTU <- otu_table(otu_table_in, taxa_are_rows = TRUE)
View(otu_table_in)
View(taxonomy)
TAX <- tax_table(taxonomy)
META <- sample_data(metadata)
## load tidyverse
library(tidyverse)
is.data.frame(otu_table_in)
is.matrix(otu_table_in)
as.data.frame(otu_table_in)
View(otu_table_in)
is.data.frame(otu_table_in)
otu_table_in <- as.data.frame(otu_table_in)
View(otu_table_in)
is.data.frame(otu_table_in)
otu_table_in[OTUID, ]
otu_table_in[otu_table_in$OTUID, ]
?merge
tax <- as.data.frame(tax)
file1 <- merge(otu_table_in, tax, by=intersect(names(otu_table_in), names(tax)))
View(file1)
file1 <- merge(otu_table_in, tax, by=intersect(rownames(otu_table_in), rownames(tax)))
otu_table_in <- as.data.frame(otu_table_in)
taxonomy <- as.data.frame(taxonomy)
# Import all as phyloseq objects
OTU <- otu_table(otu_table_in, taxa_are_rows = TRUE)
# Import all as phyloseq objects
OTU <- otu_table(otu_table_in, taxa_are_rows = TRUE)
taxonomy <- read.table(file = "taxonomy.tsv", sep = '\t',  header = TRUE)
# Import all as phyloseq objects
OTU <- otu_table(otu_table_in, taxa_are_rows = TRUE)
##### read taxonomy table
tax	<- read.table(file = "taxonomy.tsv", sep = '\t', header = TRUE)
#### merge the files
merged_file <- merge(otu, tax, by.x = c("OTUID"), by.y = c("OTUID"))
out_path <- here("merged_file")
write.table(merged_file, file = out_path, sep = ",", col.names = TRUE, row.names = FALSE)
# Import all as phyloseq objects
OTU <- otu_table(otu_table_in, taxa_are_rows = TRUE)
file1 <- merge(otu_table_in, tax, by=intersect(names(otu_table_in), names(tax)))
rownames(otu_table_in)
rownames(otu_table_in$OTUID)
rownames(otu_table_in) <- names(otu_table_in$OTUID)
rownames(otu_table_in)
rownames(otu_table_in) <- otu_table_in[,1]
head(rownames(otu_table_in))
View(otu_table_in)
otu_table_in[,-1] <- NULL
View(otu_table_in)
############# now we import into phyloseq
### Read in OTU table
otu_table_in <- read.delim("merged_file")
otu_table_in <- as.data.frame(otu_table_in)
View(otu_table_in)
rownames(otu_table_in) <- otu_table_in[,1]
View(otu_table_in)
otu_table_in$OTUID <- NULL
head(rownames(otu_table_in))
View(otu_table_in)
############# now we import into phyloseq
### Read in OTU table
otu_table_in <- read.delim("merged_file")
otu_table_in <- as.data.frame(otu_table_in)
library(tidyverse)
otu_table_in %>% remove_rownames %>% column_to_rownames(var = "OTUID")
View(otu_table_in)
otu_table_in <- otu_table_in %>% remove_rownames %>% column_to_rownames(var = "OTUID")
View(otu_table_in)
head(dimnames(otu_table_in))
columnames(OTUID) <- otu_table_in[[1]]
columnames(otu_table_in$OTUID) <- otu_table_in[[1]]
colum.names(otu_table_in$OTUID) <- otu_table_in[[1]]
column.names(OTUID) <- otu_table_in[[1]]
column.names(otu_table_in$OTUID) <- otu_table_in[[1]]
colnames(otu_table_in$OTUID) <- otu_table_in[[1]]
head(otu_table_in[,1])
head(otu_table_in[1])
#### Sanity checks for consistent OTU names
taxa_names(TAX)
taxa_names(OTU)
# Import all as phyloseq objects
OTU <- otu_table(otu_table_in, taxa_are_rows = TRUE)
biomfile <- "/home/babydoll/Downloads/EANBIT_mangrove/data/phyloseq/feature-table.biom"
file1 <- import_biom(biomfile)
?import_biom
library(phyloseq)
bear <- import_biom(biomfile)
## import data
biomfile <- "data/chaillou/chaillou.biom"
library(phyloseq)
library(biomformat
getwd()
#add biome table, tree and metadata
biom_data <- import_biom(BIOMfilename = "table-with-taxonomyv2.biom",
treefilename = "tree.nwk")
mapping_file <- import_qiime_sample_data(mapfilename = "sample-metadata.tsv"))
getwd()
mapping_file <- import_qiime_sample_data(mapfilename = "sample-metadata.tsv")
#### Merge the OTU and mapping data into a phyloseq object
phylo <- merge_phyloseq(biom_data, mapping_file)
#Add names to biom table and check phyloseq objects
colnames(tax_table(phylo))= c("Kingdom","Phylum","Class","Order","Family","Genus", "Species")
rank_names(phylo)
#### number of samples
print ('Number of Samples in our Biom Table')
nsamples(phylo)
#### number of sequence variants
print ('Number of Sequence variants we have.')
ntaxa(phylo)
#### summary statistics of sampling depth
print ('Sequencing depth.')
depths <- sample_sums(phylo)
summary(depths)
View(file1)
#### data analysis and visualization
## plot_bar (v1)
p <- plot_bar(phylo)
plot(p)
## Phyloseq components
head(otu_table(phylo))
head(tax_table(phylo))
head(tax_table(phylo))
head(sample_data(phylo))
phy_tree(phylo)
###### Accessors
ntaxa(phylo)
nsamples(phylo)
sample_names(phylo)
taxa_names(phylo)
sample_sums(phylo)
taxa_sums(phylo)
rank_names(phylo)
rank_names(phylo)
sample_variables(phylo)
get_variable(phylo)
get_variable(phylo, varName = "EnvType")
get_variable(phylo, varName = "bear")
get_variable(phylo)
sample_variables(phylo)
get_variable(phylo, varName = "X..single.end.PHRED.33.fastq.manifest.file")
## plot_bar (v2)
p <- plot_bar(phylo, fill = "Phylum") + facet_wrap(~X..single.end.PHRED.33.fastq.manifest.file, scales = "free_x", nrow = 1)
plot(p)
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
#### plot_composition (Phylum within Bacteria)
library(ggplot2)
library(ape)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
library(phyloseq)
library(gridExtra)
library(dplyr)
library(grid)
library(gridExtra)
library(scales)
library(readr)
library(scales)
library(reshape2)
library(tidyr)
library(reshape2)
library(plyr)
library(purrr)
library(here)
library(dplyr)
library(plyr)
get_variable(phylo)
sample_variables(phylo)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
###### Accessors
ntaxa(phylo)
rank_names(phylo)
rank_names(phylo)
plot_composition <- function(phylo, taxaRank1 = "Phylum", taxaSet1 = "Proteobacteria",
taxaRank2 = "Family", numberOfTaxa = 9, fill = NULL,
x = "Sample", y = "Abundance", facet_grid = NULL)
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
p <- p + facet_wrap(~X..single.end.PHRED.33.fastq.manifest.file, scales = "free_x", nrow = 1)
plot(p)
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Phylum", "Proteobacteria", "Family", 9, fill = "Family")
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Phylum", "Proteobacteria", "Family", 9, fill = "Family")
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Phylum", "Proteobacteria", "Family", 9, fill = "Family")
https://cloud.r-project.org/src/contrib/PACKAGES
##### plot_composition manipulation
plot_composition <- function(phylo, taxaRank1 = "Phylum", taxaSet1 = "Proteobacteria",
taxaRank2 = "Family", numberOfTaxa = 9, fill = NULL,
x = "Sample", y = "Abundance", facet_grid = NULL)
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
p <- p + facet_wrap(~X..single.end.PHRED.33.fastq.manifest.file, scales = "free_x", nrow = 1)
plot(p)
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Phylum", "Proteobacteria", "Family", 9, fill = "Family")
library(debug)
library(devtools)
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Phylum", "Proteobacteria", "Family", 9, fill = "Family")
install.packages("devtools")
install.packages("devtools")
library(devtools)
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Phylum", "Proteobacteria", "Family", 9, fill = "Family")
## plot_composition (Family within Proteobacteria)
p <- plot_composition(phylo, "Kingdom", "Proteobacteria", "Family", 9, fill = "Family")
##### plot_composition manipulation
plot_composition <- function(phylo, taxaRank1 = "Kingdom", taxaSet1 = "bacteria",
taxaRank2 = "Phylum", numberOfTaxa = 9, fill = NULL,
x = "Sample", y = "Abundance", facet_grid = NULL)
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
p <- p + facet_wrap(~X..single.end.PHRED.33.fastq.manifest.file, scales = "free_x", nrow = 1)
##### plot_composition manipulation
plot_composition <- function(phylo, taxaRank1 = "Phylum", taxaSet1 = "Proteobacteria",
taxaRank2 = "Family", numberOfTaxa = 9, fill = NULL,
x = "Sample", y = "Abundance", facet_grid = NULL)
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
p <- p + facet_wrap(~X..single.end.PHRED.33.fastq.manifest.file, scales = "free_x", nrow = 1)
#### plot_composition (Phylum within Bacteria)
p <- plot_composition(phylo, "Kingdom", "Bacteria", "Phylum", 5, fill = "Phylum")
